Decorator Design Pattern is a structural pattern that allows you to add new functionality to an object dynamically without altering its structure.
It is used to extend the behavior of objects in a flexible and reusable way.
This pattern involves creating a set of decorator classes that are used to wrap concrete components.


Example1:-

public abstract class IceCream {
    public abstract double getCost();

    public abstract String getDescription();
}

public class Strawberry extends IceCream {
    @Override
    public double getCost() {
        return 100;
    }

    @Override
    public String getDescription() {
        return "Strawberry Icream";
    }
}

public abstract class Decorator extends IceCream {
    private IceCream ice;

    public Decorator(IceCream ice) {
        this.ice = ice;
    }

    @Override
    public double getCost() {
        return ice.getCost();
    }

    @Override
    public String getDescription() {
        return ice.getDescription();
    }
}

public class CoconutDecorator extends Decorator {
    public CoconutDecorator(IceCream ice) {
        super(ice);
    }

    @Override
    public double getCost() {
        return super.getCost() + 50;
    }

    @Override
    public String getDescription() {
        return super.getDescription() + " With Coconut";
    }
}

public class PeanutDecorator extends Decorator {
    public PeanutDecorator(IceCream ice) {
        super(ice);
    }

    @Override
    public double getCost() {
        return super.getCost() + 30;
    }

    @Override
    public String getDescription() {
        return super.getDescription() + " With Peanut";
    }
}

public class Main {
    public static void main(String[] args) {

        // Strawberry IceCream
        IceCream ice = new Strawberry();

        // Strawberry IceCream With Peanut
        IceCream peanutStrawberry = new PeanutDecorator(ice);
        System.out.println("Price: " + peanutStrawberry.getCost());
        System.out.println("Description: " + peanutStrawberry.getDescription());

        // Strawberry IceCream With Coconut
        ice = new CoconutDecorator(ice);
        System.out.println("Price: " + ice.getCost());
        System.out.println("Description: " + ice.getDescription());
    }
}


Example2:-

import java.io.IOException;
import java.io.InputStream;

public class LoggingInputStream extends InputStream {
    private InputStream ips;
    private int countChar = 0;
    private int countWord = 0;
    private int countLine = 0;
    private boolean isWord = false;

    public LoggingInputStream(InputStream ips) {
        this.ips = ips;
    }

    @Override
    public int read() throws IOException {
        int bdata = ips.read();

        if (bdata != -1) {
            char ch = (char) bdata;
            countChar++;

            if (bdata == '\n') {
                countLine++;
            }

            if (Character.isWhitespace(ch)) {
                isWord = false;
            } else if (!isWord) {
                countWord++;
                isWord = true;
            }
        }

        return bdata;
    }

    public void display() {
        System.out.println("Total Characters: " + countChar);
        System.out.println("Total Words: " + countWord);
        System.out.println("Total Lines: " + (countLine + 1));
    }

    @Override
    public void close() throws IOException {
        ips.close();
    }
}

import java.io.IOException;
import java.io.OutputStream;

public class LoggingOutputStream extends OutputStream {
    private OutputStream ops;
    private int countBytes = 0;

    public LoggingOutputStream(OutputStream ops) {
        this.ops = ops;
    }

    @Override
    public void write(int b) throws IOException {
        countBytes++;
        ops.write(b);
    }

    public void display() {
        System.out.println("Total Bytes Write: " + countBytes);
    }

    @Override
    public void close() throws IOException {
        ops.close();
    }
}

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class Main {
    public static void main(String[] args) {
        try {
            // Write the Data OutPutStream
            String msg = "Om Namah Shivay";
            OutputStream os = new FileOutputStream("Test.txt");
            LoggingOutputStream lo = new LoggingOutputStream(os);
            lo.write(msg.getBytes());
            lo.display();
            lo.close();

            // Read the Data InputStream
            InputStream is = new FileInputStream("Test.txt");
            LoggingInputStream li = new LoggingInputStream(is);

            while (li.read() != -1)
                ;
            li.display();
            li.close();
        } catch (IOException ie) {
            System.err.println(ie.getMessage());
        }
    }
}
